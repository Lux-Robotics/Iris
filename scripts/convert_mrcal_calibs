#!/usr/bin/env python3

import argparse
import re
import sys

import mrcal
import toml

parser = argparse.ArgumentParser("mrcal_converter")

parser.add_argument("filepath", help="Path to your .cameramodel file", type=str)
parser.add_argument("outputpath", help="Output filepath", type=str)
args = parser.parse_args()

def parse_calibration_output(file_path):
    with open(file_path, 'r') as file:
        text = file.read()

    rms_pattern = r"RMS reprojection error: ([\d.]+) pixels"
    worst_residual_pattern = r"Worst residual \(by measurement\): ([\d.]+) pixels"

    rms_error = re.search(rms_pattern, text)
    worst_residual = re.search(worst_residual_pattern, text)

    return {
        "rms_reprojection_error": float(rms_error.group(1)),
        "worst_residual": float(worst_residual.group(1))
    }

try:
    model = mrcal.cameramodel(args.filepath)
    stats = parse_calibration_output(args.filepath)
except:
    print("Error loading calibration file:", args.filepath)
    sys.exit()

model_type, intrinsics_mrcal = model.intrinsics()

x_res, y_res = model.imagersize().tolist()

# TODO: these return as strings?
intrinsic_matrix_opencv = [
    [float(intrinsics_mrcal[0]), 0, float(intrinsics_mrcal[2])],
    [0, float(intrinsics_mrcal[1]), float(intrinsics_mrcal[3])],
    [0, 0, 1],
]

distortions_opencv = intrinsics_mrcal[4:].tolist()

calibration_out = {
    "lensmodel": "LENSMODEL_OPENCV8",
    "resolution": [x_res, y_res],
    "cameraMatrix": intrinsic_matrix_opencv,
    "distCoeffs": distortions_opencv,
    "rms_reprojection_error": stats["rms_reprojection_error"],
    "worst_residual": stats["worst_residual"]
}

# Read the first few lines of the input file
with open(args.filepath, 'r') as file:
    file_header = ''.join([next(file) for _ in range(5)])

# Write the output to a TOML file
with open(args.outputpath, "w") as out:
    out.write(file_header)
    out.write("\n")
    out.write(toml.dumps(calibration_out))

